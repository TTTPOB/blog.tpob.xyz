<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on TPOB&#39;s Dustbin</title>
    <link>https://blog.tpob.xyz/posts/</link>
    <description>Recent content in Posts on TPOB&#39;s Dustbin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 24 Mar 2021 14:36:15 +0800</lastBuildDate><atom:link href="https://blog.tpob.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一些小脚本</title>
      <link>https://blog.tpob.xyz/2018/11/27/%E4%B8%80%E4%BA%9B%E5%B0%8F%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Tue, 27 Nov 2018 22:41:37 +0000</pubDate>
      
      <guid>https://blog.tpob.xyz/2018/11/27/%E4%B8%80%E4%BA%9B%E5%B0%8F%E8%84%9A%E6%9C%AC/</guid>
      <description>一些小脚本 我老是会忘掉一些好用的脚本\命令\snippet，因为并不是很常用，本地存吧又会乱，OneNote因字体问题已然放弃，就扔在这里吧。出处的话，我也不能保证是原创啦，大概只能写上Google第一条结果（
删除[PATH]路径下所有失效软链接 删除所有软链接 find -type l -delete [PATH] 删除所有失效软链接 find -L [PATH] -type l -delete &amp;ldquo;-L&amp;quot;参数表示什么我没有看懂，原作者说是追踪软连接，&amp;ndash;help说是tree。有人知道评论告知，不胜感激。
来源：Librehat的部落格
读取软链接下文件的真实位置 使用readlink工具(自带)
readlink -f [file_or_dir] 使用英伟达独显的linux用户桌面出现撕裂 添加
(sleep 2s &amp;amp;&amp;amp; export __GL_YIELD=“USLEEP” &amp;amp;&amp;amp; kwin_x11 --replace ) 到启动脚本。 来源见此
SGE集群(使用qsub的)查看自己限额 这个跟不同集群设置也有关系的，可能不行
qconf -srqs quota_on_{队列名字} | grep {用户名} 安装R包缺动态链接库 参看这个回答，核心就是手动指定动态链接库
withr::with_makevars(c(PKG_LIBS=&amp;#34;-liconv&amp;#34;), install.packages(&amp;#34;haven&amp;#34;), assignment=&amp;#34;+=&amp;#34;) 安装R包出现unable to load shared object &amp;hellip;&amp;hellip; haven.so: undefined symbol: libiconv ERROR: &amp;hellip;&amp;hellip; 错误 参看haven的issue，安装时使用withr::with_makevars(c(PKG_LIBS = &amp;ldquo;-liconv&amp;rdquo;), install.packages(&amp;ldquo;haven&amp;rdquo;), assignment = &amp;ldquo;+=&amp;quot;)即可。其它类似报错也可如法炮制。
各种依赖ncurses的程序报缺so文件（libncurses.so.6, libtinfo.</description>
    </item>
    
    <item>
      <title>更快下载sra数据库中的fastq.gz文件</title>
      <link>https://blog.tpob.xyz/2021/03/24/%E6%9B%B4%E5%BF%AB%E4%B8%8B%E8%BD%BDsra%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84fastq.gz%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 24 Mar 2021 14:36:15 +0800</pubDate>
      
      <guid>https://blog.tpob.xyz/2021/03/24/%E6%9B%B4%E5%BF%AB%E4%B8%8B%E8%BD%BDsra%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84fastq.gz%E6%96%87%E4%BB%B6/</guid>
      <description>啊狗屎ncbi的sra数据每次都要prefetch下下来再fastq-dump/fasterq-dump，真的是气死我了，prefetch还是单线程，在众所周知的网络环境下面的速度一言难尽&amp;hellip;
好在ebi数据库不仅与ncbi同步更新而且还直接给了fastq.gz的下载链接，甚至有给你json api来根据accession number获取，所以我们可以有如下的操作。
打开你需要的GSE页面进入SRA RUN Selector，下下来之后里面应该长这样
cat example.list SRR000999 SRR000998 SRR000997 然后我们使用临时摸出来的这个脚本，和parallel，
cat example.list|parallel SRR2fqgz.py | parallel aria2c -x16 -s16 {} 它应该就可以下好了</description>
    </item>
    
    <item>
      <title>在WSL2上修好到服务器的X11转发</title>
      <link>https://blog.tpob.xyz/2020/12/11/%E5%9C%A8wsl2%E4%B8%8A%E4%BF%AE%E5%A5%BD%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84x11%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Fri, 11 Dec 2020 13:41:33 +0800</pubDate>
      
      <guid>https://blog.tpob.xyz/2020/12/11/%E5%9C%A8wsl2%E4%B8%8A%E4%BF%AE%E5%A5%BD%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84x11%E8%BD%AC%E5%8F%91/</guid>
      <description>大约一年以前我从WSL1“升级”到WSL2，首先遇到的问题是以前常用的在Windows上跑一个x服务器然后用x11监听到wsl里来用图形软件的做法似乎不能用了：
Error: Can&#39;t open display: localhost:10
如果有人需要解释为什么是localhost:10而不是:10那你可以先去查一查(
解决办法比较简单，是把localhost:10换成$WINDOWS_IP:10当然这个10可以是你想要的任何端口号。（我保持这个状态到了今天）
心情好的话我改天更新一下把涉及到的所有奇怪操作都写一下免得你们还要去别处查
但当你这样弄完之后你会发现你SSH到实验室服务器的时候会Warning: untrusted X11 forwarding setup failed: xauth key data not generated，并且确实无法使用服务器的X11软件，即使ssh -Y也不行。
那我只能ssh -vvv看看出了什么事，发现卡在这里：
debug2: client_x11_get_proto: xauth command: /usr/sbin/xauth -f /tmp/ssh-V0tly0ULHMm2/xauthfile generate 172.26.112.1:10 MIT-MAGIC-COOKIE-1 untrusted timeout 1260 2&amp;gt;/dev/null
其中172.26.112.1:10是我刚刚设置的$WINDOWS_IP:10，所以似乎&amp;hellip;xauth没有办法在target不在本机的时候进行认证？看起来好像是这样，但我们又不能设置到WSL2的localhost这样windows上的x服务器认不到端口&amp;hellip;
但是
我们
可以用
端口转发
去nmdX11转发
（
我是这么干的
在服务器上的.whatevershrc:
export DISPLAY=localhost:10
在本地用带端口转发的ssh
ssh $targetserver -R 6010:localhost:6010
另开一个本地终端
socat tcp-l:6010,fork,reuseaddr tcp:$WINDOWSIP:6010 &amp;amp;
然后记得在windows打开你的xserver并设置好监听到10，当然如果你开在别的端口就监听别的，上面也都改成你自己设置的。
好了我们在服务器试试xeyes。
今天没带鼠标懒得插图总之我成功了嗯。
啊你问我为什么一年以前的事情现在发，，，其实是我忍了一年今天才知道为啥出了问题（
哦中英文互联网世界好像都没有人有这个问题，估计他们没有我这么扭曲的需求吧。</description>
    </item>
    
    <item>
      <title>OneDrive app 自动备份的文件整理脚本</title>
      <link>https://blog.tpob.xyz/2020/05/21/onedrive-app-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E7%9A%84%E6%96%87%E4%BB%B6%E6%95%B4%E7%90%86%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Thu, 21 May 2020 21:35:51 +0800</pubDate>
      
      <guid>https://blog.tpob.xyz/2020/05/21/onedrive-app-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E7%9A%84%E6%96%87%E4%BB%B6%E6%95%B4%E7%90%86%E8%84%9A%E6%9C%AC/</guid>
      <description>我一直使用移动设备的OneDrive app来对我的照片、录像、屏幕截图等进行备份，但是它会将所有的文件都堆积到同一个文件夹中。时间一长，文件夹中将堆积数以千记的文件，不好查找不说，还会卡死资源管理器。 为了解决这一问题，我找了一些现成的工具如Dropit等，发现都不能满足我的要求；于是我花几分钟写了一个PowerShell脚本放在gist上。它的工作流程是先根据文件名判断是截图、录像还是照片，然后根据文件修改时间将其归类到不同的文件夹中。代码十分简单，加之PowerShell脚本十分易读，可以很方便地修改来适合自己的文件名。 效果图 使用方法非常简单，只需要将脚本放在图片目录下右键执行即可。当然，你也可以把脚本加入环境变量然后在终端中执行。 需要注意的是，为了安全，Windows默认是不允许执行ps1脚本文件的，为了解除这一限制，需要以管理员权限打开powershell会话，执行 Set-ExecutionPolicy RemoteSigned，意为允许运行本地任意脚本和来自网络的已签名脚本。</description>
    </item>
    
    <item>
      <title>如果你想不开想要在公司集群上编译R</title>
      <link>https://blog.tpob.xyz/2018/12/03/%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%83%B3%E4%B8%8D%E5%BC%80%E6%83%B3%E8%A6%81%E5%9C%A8%E5%85%AC%E5%8F%B8%E9%9B%86%E7%BE%A4%E4%B8%8A%E7%BC%96%E8%AF%91r/</link>
      <pubDate>Mon, 03 Dec 2018 23:25:19 +0000</pubDate>
      
      <guid>https://blog.tpob.xyz/2018/12/03/%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%83%B3%E4%B8%8D%E5%BC%80%E6%83%B3%E8%A6%81%E5%9C%A8%E5%85%AC%E5%8F%B8%E9%9B%86%E7%BE%A4%E4%B8%8A%E7%BC%96%E8%AF%91r/</guid>
      <description>&lt;h1 id=&#34;如果你想不开想要在公司集群上编译r&#34;&gt;如果你想不开想要在公司集群上编译R&lt;/h1&gt;
&lt;p&gt;我前两天做了一个让我非常痛苦的决定。&lt;br&gt;
我们公司的集群，IO极差，删anaconda文件夹可能要删三天。&lt;br&gt;
我们公司的集群，为了安全考虑，一般人没有root权限。
我们公司的集群，不光没有root权限，软件和工具链也都完全不全。&lt;br&gt;
所以我选择使用Anaconda当包管理器，但是一旦anaconda内部软件更新，外部依赖这些动态链接库的软件就会集体GG。比如htop、tmux(其实tmux也是我用anaconda装的)和自己装的ssh(为什么要自己装emmm，有缘再讲)。而且我平时用的最多的是R，但是R这个东西编译起来十分蛋疼所以我也用anaconda装了。&lt;br&gt;
但是。&lt;br&gt;
但是，anaconda里面的R版本更新特别慢，包的更新也特别慢，而且anaconda处理依赖的时候有我无法看出规律的诡异升级和降级过程，导致经常装一个新包的时候告诉你R要降级。&lt;/p&gt;
&lt;h2 id=&#34;那就自己编译一个r&#34;&gt;那就自己编译一个R！&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>一个简陋的pubmed摘要爬虫</title>
      <link>https://blog.tpob.xyz/2018/12/02/%E4%B8%80%E4%B8%AA%E7%AE%80%E9%99%8B%E7%9A%84pubmed%E6%91%98%E8%A6%81%E7%88%AC%E8%99%AB/</link>
      <pubDate>Sun, 02 Dec 2018 16:29:35 +0000</pubDate>
      
      <guid>https://blog.tpob.xyz/2018/12/02/%E4%B8%80%E4%B8%AA%E7%AE%80%E9%99%8B%E7%9A%84pubmed%E6%91%98%E8%A6%81%E7%88%AC%E8%99%AB/</guid>
      <description>一个简陋的pubmed摘要爬虫 前段时间被组里布置了一个很烦人的任务，要看很多文献的摘要提取这些研究的结果，我觉得用手点实在是太麻烦了，于是想用爬虫来完成copy摘要的任务。虽然我还不会写爬虫（甚至没怎么写过python），但是都可以学的嘛。
直接上代码，这个代码非常不pythonic，但是你要考虑到我能用就行的标准不是？：
#!/home/tpob/miniconda3/bin/python import requests, lxml, urllib, re from bs4 import BeautifulSoup # 定义UA， 虽然pubmed好像根本没有反爬虫措施 headers = { &amp;#34;User-Agent&amp;#34;:&amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&amp;#34; } # 读进我要查的文献列表，每行一个 with open(&amp;#39;/home/tpob/paper_list.txt&amp;#39;, &amp;#39;r&amp;#39;) as paper_list: paper_names=paper_list.read().splitlines() # 等一会BeautifulSoup解析出来的元素都是标签，用这个函数方便后面map成plain text def tag_to_string(tag): return tag.text # 开文件准备往进写 with open(&amp;#39;/home/tpob/abstracts.md&amp;#39;, &amp;#39;a&amp;#39;) as abstracts_file: print(&amp;#34;# Abstracts of all papers:\n&amp;#34;, file=abstracts_file) for paper_name in paper_names: paper_name_url = { &amp;#34;term&amp;#34;:paper_name.encode(&amp;#34;utf-8&amp;#34;) } pubmed_request = requests.</description>
    </item>
    
    <item>
      <title>Surface Pro 6简评</title>
      <link>https://blog.tpob.xyz/2018/11/14/surface-pro-6%E7%AE%80%E8%AF%84/</link>
      <pubDate>Wed, 14 Nov 2018 10:15:33 +0000</pubDate>
      
      <guid>https://blog.tpob.xyz/2018/11/14/surface-pro-6%E7%AE%80%E8%AF%84/</guid>
      <description>辣鸡微软 图为已经卖出的Surface Book 2。 一拖拖了十一天，今天正式开始写一写吧。
首先介绍一下本人立场和用过的机器，曾为软粉，后认清资本家的丑恶嘴脸不再怀有感情，只是硬件确实还行继续捧场。买过几部Lumia（万恶之源），很是喜欢，后来Lumia没了；大学呢先被微软蛊惑当真以为寨版够用，购入899寨版一台，也还撑了一段时间；大一下学期正赶上SP4发售，很喜欢，找家里要钱买了（败家子）；一直用到今年三月出来实习自己攒钱加东拼西凑复又找家里要一点换了Surface Book 2 13.5 i7 8G 256G版本，其实这台机器我本来也想写个体验，但是人懒嘛，鸽掉了；再后来呢，今年10月20号，终于因为嫌沉，卖掉了SB2换了SP6。仔细想想可能亏了吧，不过Surface Book对于我来说确实是徒增累赘（我在这三四年间维护有一台“忒修斯的台式机”，目前是E5 1620 + 16G + GTX 1070的状态），还是减重来的实在。
其实我拿到机器已经很有一段时间了，刚出不久就着急换上了，一来是终于用上了新的八代U（可惜是8250U之类少老的，不过也无妨），四核比双核强上不少；二呢就是上面说的，嫌沉；三&amp;hellip;我能告诉你是因为酒红+纯黑配色深得我心吗？
购买之前 微软这次与那隔壁奸贼苹果学坏，出新（实是旧）配色捞钱，浓眉大眼叛变革命，应当拖出去打死。官网售价虽然都是黑白同价，但是从58256版本开始才有黑色。听上去没有什么问题，但是58256要价8988，58128要价6988，（均为官网售价），也就是说你如果要买黑色，你必须多掏2000块钱（我上一台128G是完全够用的）。
另外，这一代的起售版本（乞丐版）终于不是可怜的4G内存了，价格上似乎也稍微良心了一点，相比于上一代的价格其实是略有下降的。去年54128版本要价7688，这代6988，详细对比不做了，没那闲工夫。Surface Go其实也在考虑范围，但是转念一想，我并不是那种硬核商务人士需要揣兜即走的便携性，Surface Pro系列在我看来是最符合我的需求的，因此还是买了SP6。
开箱 开箱过程略带一笔吧。熟悉的盒子，不一样的配色。阻尼适中，充电器依旧那么大，微软这一点应该改改了。 没错，这里本来有很多图的。 日常体验 申明在先：仅为个人体验。我的使用环境是公司寝室两点一线，公司使用的软件主要是chrome连服务器jupyter和office偶尔Adobe Illustrator，和盯着发呆；个人使用主要看B站写东西，和盯着发呆。
听说是最棒的二合一产品 这个部分先夸夸吧，一会再骂个痛快，缺点就不说了。
系统 经过我已经见过上百遍的初始化过程，来到桌面。这次的Surface终于有自己的壁纸了（没记错的话）。还凑合吧，我就一直用着了。
开机的Windows Hello非常快，不过应该是还没有到慢的时候，我想（一语成谶）。关掉一些中国人没处用的功能，忍受着割裂感堪比太平洋的UI界面和大概是bing机翻的设置选项，我将机器调到了我喜欢的样子，顺便装上了代号1809，十月推送又取消，等到十一月快结束了终于推送的这样一个系统更新（真的，你要相信我，真的是稳定版，微软情真意切地说）。 抛却bug，观感上略微好了一点，也终于加入了云剪贴板，实现了傻老板在家里复制在办公室粘贴的愿望。不过这个功能是默认关闭的，也没有什么提示，考虑到想必大多数Windows用户都是不看更新日志、也从来不会打开开始菜单里非常想被你点开的《使用技巧》的，和其他许多功能一样，这个功能应该直到大多数人换苹果都不会被发现，然后他们吹爆苹果。 硬件 这一代i5版本也没有风扇，永远不会听到嗡嗡声，这一点非常棒，就我的日常使用也没有出现过热的情况，温手是有的，特别是充电的时候比较热。不过由于我触摸屏使用的不多（原因在后面），不会有特别热的感觉。没有测温枪，仅供参考（私心广告，专业评测认准notebookcheck.net）。
屏幕方面加入了新的广色域模式（设置里叫增强模式），打开之后的直观感受是黑色更深，亮色更亮，确实舒服了很多（我就是这种老年人审美喜欢重口味）。我这台机器貌似有一点漏光，不过比起惊天地泣鬼神的SP4，还是好到不知道哪里去了。高分屏问题就是老生常谈了，无话可说。
续航方面略有加强，没有特别认真测过，没那个闲工夫。比SP4强上不少，比SB2吧，嘿嘿嘿。
2018年，8G起售的内存还是比4G不知道高到哪里去了。日常使用没有问题。CPU也完全满足我数框框的欲望。这里八代低压值得夸奖。 便携性方面原地踏步，当然，已经很棒，几代无风扇版本重量没有变化。进步还是有的，合盖即走差不多可以实现了。我基本上不会主动去关机，都是合盖带走，晚上休眠。除了SSH连接不可避免的断开之外，几乎对我的工作没有什么打断，也不会在背包里异常发热（一个月内没有遇到，希望不要立下必倒的Flag）。
键盘手感没有大变化，依旧舒适。触摸板略小但也够用。玻璃表面比较顺滑，出汗除外。Alcantara表面触感舒适，看着没毛，摸着是有毛的触感，很棒。使用一月未见明显沾污。此处点名批评SP4，用几周就脏了。背光养眼，SB2背光和键盘手感明显不如SP系列，廉价感明显，明明贵那么多。 最后，支架，更大开合，爽。 除此之外体验与SP4无异。
欠图
什么，你问我笔和触摸屏？没事不会忘的，在批判一番部分。
如果它是最棒的二合一产品，一定是因为同行的衬托 初始化 其实从初始化过程开始就槽点满满。从Surface Pro 4开始，笔不再是随机附赠的配件，于是开机初始化过程中也没有了让你配对笔的提示（让你感觉你买的不是Surface）。还有吓人的小娜，我认为这个语音设置这个选项应当不默认打开，真的容易吓人一跳，特别是在小娜越来越人工智障的今天。这个功能呢，我在装完台式泡脚的时候最常用，也算得上是一个无障碍设计了吧。
对了，不知为何微软下调了备受好评的Cortana的开发优先级，连带着已经有的feature也改了回去，现在是一个彻头彻尾的人工智障了。
系统与BUG 进入系统，UI上的割裂感、翻译的错误不必多说（其实是懒，以后可能写两篇吧），让你感觉这不是一个这种体量的公司能做出来的产品。对了，微软说，这是正式版。实际上我没有感觉到这个“正式版”与预览版有什么差别。尽管当我装上1809的时候，微软已经推出了修复版本并宣称这种事情不会再发生，然而我发现我不能够顺利的使用映射网络驱动器功能（与台式机），上网一查，emmm。你问我为什么不用旧版？旧版有同步剪贴板吗？ 还有我们的中文输入法呦！自定义词库云同步的问题不说了，我是没有成功过，手动导入导出吧标准一会一变，真是有能耐（隔壁Google一个样）。中文输入法的细胞词库是这个画风的。专业有着非常明显的重叠，并且你在中国做，连个诗词戏曲都没有，打个“铁骑突出刀枪鸣”都得费半天劲&amp;hellip;（刚刚发现这句没有云联想可能是因为已经不念tie3 ji4了，改成tie2 qi2了。我不管，我念骑，保护有明确区分意义的多音字人人有责。） 上面还提到，合盖即走几乎可用，为什么说是几乎可用呢？因为微软会在不知道什么判断标准下，将你合盖的动作视为重启，尽管你的后台还挂着一大堆东西。这个问题我记得从1709就非常显著了，然而一直还在，可能微软想彰显手动休眠不可替代的传统意义吧。
对了，Windows Hello已经被拉回SP4的速度了哈哈哈哈哈哈哈哈一语成谶。
触摸屏与手写笔 罄竹难书啊罄竹难书。这还是第一页呢。这是一个横跨我用过的所有Surface产品的BUG。 真的，时不时就不能用。毕竟有的时候手戳一下比拿上鼠标移过去要方便许多，就指望着它工作的时候，哦嗬(hou)，不能用；不指望吧，误触。真的是尴尬之极。触摸屏在我最密集的使用情景是晚上吊夹在床头看视频或是串流游戏。然而吊起来之后嘛，你自然是没有键盘鼠标可用，触屏有如此蛋疼，于是我时常需要取下调好再装上，使用体验可想而知。啊对了，触摸板也会有短暂失灵。
另外，Windows平台上的触摸输入法，一言难尽。英文输入法已经加入语音输入和滑行输入；中文嘛&amp;hellip;嘿嘿嘿。要说是因为中文的难做，那早在砍掉的Windows Phone上就有了中文的语音输入和滑行，准确率相当不错，甚至还有调节键盘光标的小点点，一到电脑上就成了：“来来来大家都用触屏的Windows吧，只不过这个Windows触屏不大方便”。 我的手写笔是4代赠送的，因为使用频率不高，一直没有更新换代。一来我既不会画画，字也丑；二来真的不好用，延迟也高支持的软件少，还经常跟随触摸屏一起失去响应。现在微软强化了Sticky Notes软件算是得以一用。（另外，Sticky Notes曾经用过便笺这一中文名出现在我的软件列表里，不知何故又改了回去） 显示屏也在这里说了吧，这才一个月，左下角已经出现三个亮斑，我是绝对没有撞过屏幕，爱惜得很。等下次有什么严重问题送修得了。</description>
    </item>
    
    <item>
      <title>为什么湖北有这么多黄*地名</title>
      <link>https://blog.tpob.xyz/2018/10/26/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B9%96%E5%8C%97%E6%9C%89%E8%BF%99%E4%B9%88%E5%A4%9A%E9%BB%84%E5%9C%B0%E5%90%8D/</link>
      <pubDate>Fri, 26 Oct 2018 16:15:33 +0000</pubDate>
      
      <guid>https://blog.tpob.xyz/2018/10/26/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B9%96%E5%8C%97%E6%9C%89%E8%BF%99%E4%B9%88%E5%A4%9A%E9%BB%84%E5%9C%B0%E5%90%8D/</guid>
      <description>为什么湖北有这么多黄*地名 问题缘起 前些日子接机，遇到一个北京基因组所的老师，她问我哪里人我说黄冈人，她表示老乡，说是北京二代移民，原来也是这边的人。聊了一会她突然问我：“我来考一考你，为什么湖北这么多黄*地名，黄安黄陂黄梅黄冈黄石，全国其他地方没有这个样子的。我之前也问过好多人，他们给出的答案我都觉得不对，希望你能查一查然后告诉我。”。我想起几个月前翻看图书馆古地图时，最早一幅图是明朝，这些地名很多都已确定下来，我想应当有一个统一的原因，加之我觉得这个问题确实很有意思，于是答应下来。
远离学校图书馆的悲伤 我校图书馆有大量文史藏书、各种方志、古地图集等。可惜我在外实习无法借阅，只得上网搜索。互联网资料浩如烟海鱼龙混杂，查到的许多说法都相互抵触，辨别起来十分不易。
先从黄州开始 外事不决问Google，直接搜索黄冈地名来历得不到什么有利的信息，搜索黄州(黄冈古为县级行政单位，是黄州的州治所在)沿革得梁敢雄先生考证长文一篇(后附)，里面提到唐宋时人共识黄州春秋时为黄国之地，后加以驳斥，言应为弦国故地(考见另文，然而我并未能够找到)。此文对回答地名从何而来帮助不大，然而作者另一篇文章提到一座山叫做黄冈山，清代起，由于山上修筑声闻全城的鼓楼，改名鼓楼岗。此山及苏轼《后赤壁赋》中“过黄泥之坂”之所在，不知黄冈山和黄冈孰先孰后。查得《今县释名》中有记：“西北有黄冈山，因古黄国得名。”
似乎问题得以解决。黄国，是春秋时期的一个子爵小国，治所在今河南信阳潢川县。追根溯源是黄帝之子少昊后裔开创九夷中的黄夷，因图腾为黄鸟得名。黄夷的后代赢姓伯益长子大廉，字太康，建立了黄国，所以黄国为赢姓黄氏。
然而，问题出现了，黄国是一个子爵小国，河南信阳距黄冈市距离不短，并非一个子爵国能够控制的范围。前述黄国为黄氏启发我可以试着查查黄姓相关的资料，查得如下:
 近年来，有学者提出一个新的发现：春秋时期有两个黄国，一个是潢川的黄国，另外还有一个西黄国，在今湖北宜城市东南的汉水以东、大富水以西、古随国西南，因为太小，一直鲜为人知。&amp;hellip;&amp;hellip; 周朝取代商朝后，如今的黄姓家谱中大都有“黄石佐周，以功封黄，赐姓黄氏，食郡江夏”的记载。
来自黄国的黄石，辅佐周武王灭掉商朝有功，周武王自然要对功臣进行封赏。但把他封赏在哪里呢？
周武王看到，在南方江汉流域的殷商旧部和一些少数民族并不服从周朝的管辖和统治，经常起兵反抗。
黄国离江汉流域并不远，可以利用黄国对那里进行控制。
于是，周武王把黄石封到江夏，让子爵黄国的领土扩大，条件是黄石要把黄国的人口迁移一些到江夏去。
黄石及其后人按照周武王的战略部署，逐步把黄国的民众迁徙到江汉流域，在江夏建立了新的国家，江夏成为黄姓的第二故乡，也是全国最著名、最兴盛、最有影响力的黄姓发祥地。
有学者认为，黄石在江夏建立的新黄国，就是西黄国。
周朝时，黄国的势力渐渐发展起来，与淮水流域的江、道、柏、弦等赢姓国结成了同盟，并成为盟主。
同时，又通过与姬姓小国联姻等方式，改善与周朝及中原各国的关系。
这时，南方的楚国日益强大，不断向扩张势力，黄国加强与各赢姓诸国的同盟，与姬姓随国结成同盟，一起抵抗楚国的威胁和进攻。
公元前658年，黄国与江国参加了齐侯主持的贯之盟会，第二年又参加阳谷之盟，与齐、宋、郑、卫、鲁等国结成了反楚同盟。
两年后，黄国参与了齐、鲁、宋、卫等同盟国攻打楚国好伙伴陈国的军事行动。
楚国毛了，决定对黄国进行报复。
公元前649年冬，楚国以黄国不向楚王纳贡为借口，大举入侵黄国。
黄国国君一直认为有齐、鲁等大哥们罩着，楚国不敢动自己，军事上疏于防范，在楚国大军面前，黄国军队不堪一击。
公元前648年夏，黄国被楚国灭亡。
黄国被灭，国人为纪念黄国，以国为姓。
黄国所在地，在夏、商朝被称为黄邑，西周、春秋时被称为黄国，楚国灭掉黄国后又称为黄邑，秦汉时期被称为光山，也就是今河南潢川县。
黄国故城遗址至今仍在，保存完好，被列入河南省级重点文物保护单位。
存在时间长达1500多年的黄国被楚国兼并后，国人为纪念黄国，以国为姓。
国没有了，黄姓族人四散开去，一部分人逃亡到中原的各大诸侯国，形成了后来的淮阳黄氏。
大量族人进入今湖北黄陂、黄冈、黄安、黄梅、黄石等地，这些地名因黄姓人入居而得名。
 看上去说得很有道理，然而我想起黄石似乎并不是如此得名。印象中黄石仅仅是因色得名。随后发现知乎上有一个跟老师提的问题几乎一模一样的问题，有人给出意见是这是凭空臆想牵强附会之说，没有什么证据表明这些地名与黄国人口迁居有关。线索断掉。
确有其事的黄陂 黄陂由来倒是有一个确切说法，三国时刘表使手下黄祖于江夏筑城防守，黄祖以姓名城，名曰黄城镇，北齐改名为黄陂，是将黄城与武湖合称。百科说黄州是因置州时治所在黄城镇得名。梁敢雄先生的文章更加详细地说明了这一点，原文略长，引用不变，牵扯到以邾城为治所的几个郡、州的复杂严格问题，链接附于文后。
因而我们得知，黄州之名并非来源于黄冈，而是来源于黄陂。实际上黄冈县得名于隋开皇十八年，北齐合并齐安郡下多县为南安一县，隋改南安为黄冈。早些时候，开皇五年，前代衡州改名黄州，前代黄州降格为黄陂县。这才有黄州州治迁往黄冈县。 说回黄祖，黄祖是江夏黄姓，理应确与黄国有关，如此说来，黄州也算是与黄国搭上关系了。
几易其名的红安 红安县，往前数有两个名字，最初叫做新安县，后来叫做黄安县。搜得文章一篇，详述沿革。
 提起“新安”，还要从红安建县的历史谈起。
红安这地方，在447年建县以前，也就在公元1563年（明朝嘉靖42年）以前，是黄冈、黄陂、麻城三县的交接处，属于三不管的地方。由于地处偏僻，交通不便，匪盗猖獗。土匪、强盗经常在这一带聚集，抢劫偷盗老百姓的财物，甚至杀人放火，各类案件层出不穷，于是有人就到黄冈县去告状，黄冈县说，你们这块地方不归我县管，我们管不了。人们就跑到黄陂县去告状，黄陂县也说，你们这块地方不归我县管，我们管不了。人们又跑到麻城县去告状，麻城县也说，你们这块地方不归我县管，我们管不了。都不管。是一个典型的“三不管”地区。这正是：匪盗猖獗，告状无门，百姓遭殃，难以生存。
在这种情况下，怎么办？这时引起了麻城县两位监生秦钺和李大夏的注意。所谓“监生”，就是明朝选到国子监读书的学生，统称为监生。他们在明朝嘉靖21年（公元1542年）上书朝廷，请求建县。这个建议，得到巡抚湖广右副都御史陆杰和巡按湖广监察御史史保善的赞同，都力主建县。可是这个建议，遭到了一部分人的强烈反对与阻挠，讲了很多建县的困难，使得这次上书建县的请求没能成功。
明嘉靖26年（1547年），黄州知府郭凤仪上书驳斥了“建县困难”的言论，陈述了建县的必要性，说建县是“益国便民，最为要务”之事。他的这个主张，得到后为黄安人耿定向的支持，他为建县的事写信给前湖广右副都御史冯岳，冯岳也力主建县。但由于这些地方的官员不断变动，无人再管，这样建县的主张又被搁置下来。直到13年以后，即明嘉靖39年（1560年），耿定向这时已升任户部尚书。户部尚书就是掌管全国土地、户籍、赋税、财政收支等事务的最高长官，相当于我们现在一些相关部的部长和财政部长。他有资格会见京城的其他高官和朝拜嘉靖皇帝。这样他在京师会见了新任湖广巡抚刘伦，与他面议建县的事。刘伦极为重视，赴任后即将建县的任务交给了麻城县令苏松办理。哪知刘伦上任不久就被调走了，接任刘伦巡抚职务的名叫张雨，他不了解情况，使建县之事又泡了汤。
明嘉靖40年（1561年），耿定向奉命视察西夏，在宜城道上与继任湖广巡抚张雨相会，又与张雨洽商建县的事。这时，监生王国任同一些父老乡亲又联名上书要求建县，于是，张雨要他的下属集体讨论建县的事，官员们都表示赞同。这样，建县的事才算定了下来。明嘉靖41年（1562年）11月，《两台疏》上奏朝廷，礼部尚书徐阶在朝中竭力赞助，恳切说明建县的利害关系，尤其是耿定向为建县事更为出力。这样，在明嘉靖42年（1563年）3月13日经户部复奏，朝廷正式批准建县。从监生秦钺、李大夏在1542年提出建县到1563年正式批准建县，长达21年之久。
建县被批准之后，那么这个县叫什么名字呢？当时考虑到是“新”建立的一个县，为保持这个县的安定和安宁，就定名为“新安县”。不久，经人考证“新安”这块地区，春秋时期属于黄国管辖的地方，为求“地方宁谧，生民安妥”，就改称为“黄安”。因为“黄”字在过去是一个很吉利字眼和颜色。是中华民族的代表色。为什么？大家知道，我们是“炎黄子孙”，最早的帝王叫黄帝，黄色在“五行”中属土，典籍中记载有“五行，土为尊也”和“黄：中央之正色也”的说法，所以皇帝就职时被称为“黄袍加身”，表彰有功之臣时，就赠“黄马褂”一件，等等。我们有很多县名也都冠以“黄”字，如黄冈、黄陂、黄梅、黄州等 引注:此处说法不对，所以将“新安”改名为“黄安”，就是这个道理。
为了明确黄安县的管辖范围，于是割麻城的太平、仙居两乡20里甲（110户为里，里分为10甲），黄陂的滠源乡8里甲，黄冈的上中和乡12里甲为新建县，也就是后来黄安县的管辖范围。
 当然，这也是一家之言，进来俗务缠身无法查证，若日后查证此处有误将会改正。
凑热闹来的黄石和黄梅 前面说到，黄石因色得名。历史上的黄石长期以来是一个镇，民国时叫做石黄镇(黄石港与石灰窑合称)，因附近石色黄的黄石矶得名。
黄梅就更简单了，隋开皇十八年（598年）改新蔡县为黄梅县。据《今县释名》：“黄梅山在西北，山多黄梅，以此名县。”
总结 虽然看上去湖北有密度较高的黄*地名，但实际上确实有内因的仅有三个，可以算得上是一种巧合了。总之，经过这次较为漫长的搜索，越发觉得中华大地上每一片土地都承载着千年厚重的历史积淀。
References  各地名、黄夷、少昊维基百科页面 黄冈各县市地名由来 防止链接失效的web archive链接 相同的知乎提问 黄石市地名由来 Web Archive 红安县地名由来 Web Archive 梁敢雄先生的考证之一 Web Archive 梁敢雄先生的考证之二: 梁敢雄.</description>
    </item>
    
    <item>
      <title>我为什么要把小米手环3批判一番</title>
      <link>https://blog.tpob.xyz/2018/10/19/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%8A%8A%E5%B0%8F%E7%B1%B3%E6%89%8B%E7%8E%AF3%E6%89%B9%E5%88%A4%E4%B8%80%E7%95%AA/</link>
      <pubDate>Fri, 19 Oct 2018 23:43:16 +0000</pubDate>
      
      <guid>https://blog.tpob.xyz/2018/10/19/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%8A%8A%E5%B0%8F%E7%B1%B3%E6%89%8B%E7%8E%AF3%E6%89%B9%E5%88%A4%E4%B8%80%E7%95%AA/</guid>
      <description>我为什么要把小米手环3批判一番 大家都知道今年五月底小米举行了它的八周年发布会，发布了小米8、小米手环3等等等等。米8骂得够多了，我今天来骂一骂小米手环。
1-屏幕 你看看隔壁荣耀手环4，玻璃！玻璃！小米手环这边从有屏幕开始就一直是塑料，实在是一言难尽。手环在手上戴着不摘下来，会面临各种脏污环境，甚至比手机屏幕还容易刮花，实在是不明白为啥还是用的塑料材质。
说完材质，继续看看隔壁荣耀，彩屏！彩屏！还有你家黑加也是彩屏，黑加也有NFC，你难道想告诉我你成本限制吗？还有你看看隔壁荣耀都支持支付宝二维码支付了，你呢？明明横过来肯定够显示一个条形码的。支付宝直接告诉我把小米手环当作沒有屏幕的设备，真是一言难尽。 然后是一如既往的频闪问题，你说你一个手环又不用调亮度闪什么闪。以及根据我在小米手环2的经验，这块屏幕多半会在一年之后烧屏到亮处几乎不可见。哦，对了，现在太阳底下也是基本看不见的。 2-奇怪的操作逻辑 上下滑切换一级页面，左右滑进入二级页面，这个设计看上去非常合理嘛，为什么要批判一番呢？因为当你左右滑动之后，并不能直接上下滑动切换大菜单。也就是说我看完消息之后想看看天气，必须得先返回才能滑动。我不知道这样会带来什么好处。
3-续航 不同于二代的“虚假宣传”，宣传二十天实际一个多月。这代的虚假宣传&amp;hellip;就是字面意思。标称20天的续航时间，我用了一天就掉了10%的电，感觉不大放心。
4-NFC，NFC 这是我整个使用过程中最一言难尽的部分了。
首先，不支持mipay，公交卡支持的城市也远不如小米手机多。更别提华为一向有的吸卡功能，小米从来就没有过，这可是能切切实实省掉开卡费的呀。当然，这样做可能有商业上的考量，但是从消费者的角度看，显然还是有很大的进步空间的。我还是抱着一丝支持mipay的希望，你不知道我有多讨厌二维码。
好了，下面是我感到最莫名其妙的部分—————门禁模拟。当然我知道这是处于实验阶段的一项功能，但我觉得下面这些错误，并不应该在小米这种体量的公司中出现。
首先，我公司的门卡绝对不是一张加密卡，也确实是一张符合小米手环模拟要求的卡，我的手机都能够读出来并且用第三方软件模拟作为门禁使用。然而小米手环识别了半天告诉我不能模拟，我不知道这是为什么。没有办法我只得买了cuid白卡，用手机dump下公司门卡之后写进去，再由小米手环进行模拟，嗯，成功了，我可以刷开公司分配的宿舍的门了，我开心的像个两百斤的孩子，完全没有意识到第二天会发生什么。
第二天，我拿着卡准备刷开公司大门的时候，发现刷卡机不理我。是的，不理我。好在我还是带了工卡的。坐到座位上，我用手机读取了工卡的信息（下图左），和手环的信息（下图右）。高斯模糊的是卡的id，打码原因是你要是拿去模拟了也能进我们小区。红圈圈住的是0扇区0块，也就是厂商块 (我不大想在这里科普过多NFC知识，感兴趣可以点链接看看，以后说不定懒癌好了自己写一篇)的后半部分，大多数情况下是不能改写的。可以看到，小米这个模拟并没有模拟这后面的一部分，导致我司验证较严的刷卡机不能识别。我并不知道为什么会做出这样的限制，反馈了也没人理我，很生气。
当然，NFC这一个部分还是有值得表扬之处的。不像其他模拟门禁的手环仅仅模拟ID，小米手环这个NFC是有一张完整的卡的，也就是说即使是加密卡，用读卡器破解之后也能够写入到小米手环里面，后续如果我的懒癌好了大概也会写一篇我校加密校园卡塞进手环的文章，可惜我不在学校，不能测试是否能用。
5-总评 其实米环3做得还不错，个人觉得总体上比米环2好看，腕带也确实更结实米粒不那么容易掉。屏幕材质、色彩、续航等问题也都是普遍反馈的问题，希望小米能够做出改变(似乎并找不到有效反馈渠道)。销售的时候NFC版迟四个月我是觉得大大的败笔，以及初始表带仅有黑色，导致我想用红色的还得多花二十，只能安慰自己 “总会断的” 了。
这大概是这个blog上的第一篇文章了。
6-最近的更新(20181113) 得到消息说米环3固件更新了白卡功能，可以自行写入加密信息。测试后发现0扇区0块依旧无法修改、也依然会篡改0扇区0块，而之前模拟卡片的非0扇区本来就可以自行修改、写入加密信息，因此本次更新似乎意义不大。</description>
    </item>
    
  </channel>
</rss>
